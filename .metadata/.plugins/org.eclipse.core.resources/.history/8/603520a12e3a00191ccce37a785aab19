/*#############################################################################################################
[입력]
가장 첫 줄은 전체 테스트 케이스의 수이다. (최대 10개의 테스트 케이스가 표준 입력을 통하여 주어진다.)
각 테스트 케이스에는 숫자판의 정보와 교환 횟수가 주어진다.
숫자판의 정보는 정수형 숫자로 주어지고 최대 자릿수는 6자리이다.

3
123 1
2737 1
32888 2
. . . 

[출력]
각 테스트 케이스마다, 첫 줄에는 “#C”를 출력해야 하는데 C는 케이스 번호이다.
같은 줄에 빈 칸을 하나 사이에 두고 교환 후 받을 수 있는 가장 큰 금액을 출력한다. 

#1 321
#2 7732
#3 88832
. . . 

################################################################################################################*/



/* ########  pseudo  ######### 

test_num <- # of test case 

for each test case:
	until stdin is not char:
		numArr <- numbers of each case
	shuffle <- # of shuffle
								// 입력 완료 
	while shuffle: 
		selection sort
								// 처리 완료
	print result;
								// 출력 완료


##############################*/
#include <iostream>

using namespace std;


void printArray(int arr[], int size) 
{ 
    int i;
   // cout << "size : " << size;
    for (i=0; i < size; i++){
        cout << arr[i];
	} 
	cout << endl;
} 


void swap(int *xp, int *yp) 
{ 
    int temp = *xp; 
    *xp = *yp; 
    *yp = temp; 
} 

int isSameValue(int arr[], int arr_length){
	for (int i = 0; i < arr_length-1; i++){
 		for(int j = i+1 ; j < arr_length; j++){
            if (arr[i] == arr[j]){
                return 1;
            }
        }
    }
    return 0;
}

int selectionSortDesc(int arr[], int arr_length, int max_shuffle){
	int max_idx;
	int count = 0;
	for (int i = 0; i < arr_length-1; i++){
		max_idx = i;
		for (int j = i+1 ; j < arr_length; j++){
			if (arr[j] >= arr[max_idx]){
				max_idx = j;
            } 
        }
     	//cout << "max_idx : " << max_idx << " / i_index : " << i << endl;
        if(max_idx == i){
            continue;
        }
		swap(&arr[max_idx], &arr[i]);
		count++;
     //   cout << "count : " ;
     //   printArray(arr, arr_length);
        
		// 지정된 횟수만큼 selectionSort
		if (count == max_shuffle){
			return 0;
		}
	}
	// selectionSort가 끝났는데도 max_shuffle 만큼 수행되지 않았다면 마지막 수 계속 shuffle
    if (count < max_shuffle && isSameValue(arr, arr_length)){
       return 0;
    }
	while(count < max_shuffle){
        count++;
		swap(&arr[arr_length-2], &arr[arr_length-1]);
	}
}


int main(){
	
	// test_num <- # of test case 
    int test_num = 0;
    cin >> test_num;
	
	//for each test case:
    for (int i = 1 ; i <= test_num; i++){
        char temp_char;
		int shuffle = 0;
		
		
		// 최대 자릿수에 해당하는 크기의 배열을 만들고 입력된 숫자의 자릿수를 확인
		int * tmp_arr = new int[6];
		char tmp_char = 'N';
		
		
		int arr_length = 0;
		for(int index = 0 ; index < 6 ; index++){
			tmp_arr[index] = -1;
			
			//Line Feed, Tab 삭제
			do{
				tmp_char = cin.get();
			} while(tmp_char == 10 || tmp_char == 9);
			if('0' <= tmp_char && tmp_char <= '9'){
				tmp_arr[index] = (int) (tmp_char - '0');
				arr_length++;
			} else{
				break;
			}
		}
		
		// 입력된 숫자의 자릿수에 따라 동적으로 배열 생성
		int * num_arr = new int[arr_length];
		for(int index = 0 ; index < arr_length ; index++){
			num_arr[index] = tmp_arr[index];
		}
		
		// while shuffle: 
        
		cin >> shuffle;
         	
  		//test      
      //  cout << "shuffle : " << shuffle << " / before : " ;
     //   printArray(num_arr, arr_length);
        
		//	selectionSort
		selectionSortDesc(num_arr, arr_length, shuffle);
		
		// print result
		cout << "#" << i << " ";
		printArray(num_arr, arr_length);		
    }
}
